// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/robocar.proto

#ifndef PROTOBUF_src_2frobocar_2eproto__INCLUDED
#define PROTOBUF_src_2frobocar_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace justine {
namespace robocar {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_src_2frobocar_2eproto();
void protobuf_AssignDesc_src_2frobocar_2eproto();
void protobuf_ShutdownFile_src_2frobocar_2eproto();

class CarData;
class TrafficStateHeader;

enum CarData_ProtoCarType {
  CarData_ProtoCarType_NORMAL = 0,
  CarData_ProtoCarType_POLICE = 1,
  CarData_ProtoCarType_GANGSTER = 2,
  CarData_ProtoCarType_CAUGHT = 3,
  CarData_ProtoCarType_PEDESTRIAN = 4
};
bool CarData_ProtoCarType_IsValid(int value);
const CarData_ProtoCarType CarData_ProtoCarType_ProtoCarType_MIN = CarData_ProtoCarType_NORMAL;
const CarData_ProtoCarType CarData_ProtoCarType_ProtoCarType_MAX = CarData_ProtoCarType_PEDESTRIAN;
const int CarData_ProtoCarType_ProtoCarType_ARRAYSIZE = CarData_ProtoCarType_ProtoCarType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CarData_ProtoCarType_descriptor();
inline const ::std::string& CarData_ProtoCarType_Name(CarData_ProtoCarType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CarData_ProtoCarType_descriptor(), value);
}
inline bool CarData_ProtoCarType_Parse(
    const ::std::string& name, CarData_ProtoCarType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CarData_ProtoCarType>(
    CarData_ProtoCarType_descriptor(), name, value);
}
// ===================================================================

class CarData : public ::google::protobuf::Message {
 public:
  CarData();
  virtual ~CarData();

  CarData(const CarData& from);

  inline CarData& operator=(const CarData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CarData& default_instance();

  void Swap(CarData* other);

  // implements Message ----------------------------------------------

  CarData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CarData& from);
  void MergeFrom(const CarData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CarData_ProtoCarType ProtoCarType;
  static const ProtoCarType NORMAL = CarData_ProtoCarType_NORMAL;
  static const ProtoCarType POLICE = CarData_ProtoCarType_POLICE;
  static const ProtoCarType GANGSTER = CarData_ProtoCarType_GANGSTER;
  static const ProtoCarType CAUGHT = CarData_ProtoCarType_CAUGHT;
  static const ProtoCarType PEDESTRIAN = CarData_ProtoCarType_PEDESTRIAN;
  static inline bool ProtoCarType_IsValid(int value) {
    return CarData_ProtoCarType_IsValid(value);
  }
  static const ProtoCarType ProtoCarType_MIN =
    CarData_ProtoCarType_ProtoCarType_MIN;
  static const ProtoCarType ProtoCarType_MAX =
    CarData_ProtoCarType_ProtoCarType_MAX;
  static const int ProtoCarType_ARRAYSIZE =
    CarData_ProtoCarType_ProtoCarType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoCarType_descriptor() {
    return CarData_ProtoCarType_descriptor();
  }
  static inline const ::std::string& ProtoCarType_Name(ProtoCarType value) {
    return CarData_ProtoCarType_Name(value);
  }
  static inline bool ProtoCarType_Parse(const ::std::string& name,
      ProtoCarType* value) {
    return CarData_ProtoCarType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required fixed64 node_from = 1;
  inline bool has_node_from() const;
  inline void clear_node_from();
  static const int kNodeFromFieldNumber = 1;
  inline ::google::protobuf::uint64 node_from() const;
  inline void set_node_from(::google::protobuf::uint64 value);

  // required fixed64 node_to = 2;
  inline bool has_node_to() const;
  inline void clear_node_to();
  static const int kNodeToFieldNumber = 2;
  inline ::google::protobuf::uint64 node_to() const;
  inline void set_node_to(::google::protobuf::uint64 value);

  // required fixed64 max_step = 3;
  inline bool has_max_step() const;
  inline void clear_max_step();
  static const int kMaxStepFieldNumber = 3;
  inline ::google::protobuf::uint64 max_step() const;
  inline void set_max_step(::google::protobuf::uint64 value);

  // required fixed64 step = 4;
  inline bool has_step() const;
  inline void clear_step();
  static const int kStepFieldNumber = 4;
  inline ::google::protobuf::uint64 step() const;
  inline void set_step(::google::protobuf::uint64 value);

  // required .justine.robocar.CarData.ProtoCarType type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::justine::robocar::CarData_ProtoCarType type() const;
  inline void set_type(::justine::robocar::CarData_ProtoCarType value);

  // optional int32 caught = 6;
  inline bool has_caught() const;
  inline void clear_caught();
  static const int kCaughtFieldNumber = 6;
  inline ::google::protobuf::int32 caught() const;
  inline void set_caught(::google::protobuf::int32 value);

  // optional string team = 7;
  inline bool has_team() const;
  inline void clear_team();
  static const int kTeamFieldNumber = 7;
  inline const ::std::string& team() const;
  inline void set_team(const ::std::string& value);
  inline void set_team(const char* value);
  inline void set_team(const char* value, size_t size);
  inline ::std::string* mutable_team();
  inline ::std::string* release_team();
  inline void set_allocated_team(::std::string* team);

  // optional int32 id = 8;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 8;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 size = 9;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 9;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);

  // repeated fixed64 path = 10;
  inline int path_size() const;
  inline void clear_path();
  static const int kPathFieldNumber = 10;
  inline ::google::protobuf::uint64 path(int index) const;
  inline void set_path(int index, ::google::protobuf::uint64 value);
  inline void add_path(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      path() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_path();

  // @@protoc_insertion_point(class_scope:justine.robocar.CarData)
 private:
  inline void set_has_node_from();
  inline void clear_has_node_from();
  inline void set_has_node_to();
  inline void clear_has_node_to();
  inline void set_has_max_step();
  inline void clear_has_max_step();
  inline void set_has_step();
  inline void clear_has_step();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_caught();
  inline void clear_has_caught();
  inline void set_has_team();
  inline void clear_has_team();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_size();
  inline void clear_has_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 node_from_;
  ::google::protobuf::uint64 node_to_;
  ::google::protobuf::uint64 max_step_;
  ::google::protobuf::uint64 step_;
  int type_;
  ::google::protobuf::int32 caught_;
  ::std::string* team_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > path_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_src_2frobocar_2eproto();
  friend void protobuf_AssignDesc_src_2frobocar_2eproto();
  friend void protobuf_ShutdownFile_src_2frobocar_2eproto();

  void InitAsDefaultInstance();
  static CarData* default_instance_;
};
// -------------------------------------------------------------------

class TrafficStateHeader : public ::google::protobuf::Message {
 public:
  TrafficStateHeader();
  virtual ~TrafficStateHeader();

  TrafficStateHeader(const TrafficStateHeader& from);

  inline TrafficStateHeader& operator=(const TrafficStateHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficStateHeader& default_instance();

  void Swap(TrafficStateHeader* other);

  // implements Message ----------------------------------------------

  TrafficStateHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrafficStateHeader& from);
  void MergeFrom(const TrafficStateHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 time_minutes = 1;
  inline bool has_time_minutes() const;
  inline void clear_time_minutes();
  static const int kTimeMinutesFieldNumber = 1;
  inline ::google::protobuf::int32 time_minutes() const;
  inline void set_time_minutes(::google::protobuf::int32 value);

  // required int32 time_elapsed = 2;
  inline bool has_time_elapsed() const;
  inline void clear_time_elapsed();
  static const int kTimeElapsedFieldNumber = 2;
  inline ::google::protobuf::int32 time_elapsed() const;
  inline void set_time_elapsed(::google::protobuf::int32 value);

  // required int32 num_cars = 3;
  inline bool has_num_cars() const;
  inline void clear_num_cars();
  static const int kNumCarsFieldNumber = 3;
  inline ::google::protobuf::int32 num_cars() const;
  inline void set_num_cars(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:justine.robocar.TrafficStateHeader)
 private:
  inline void set_has_time_minutes();
  inline void clear_has_time_minutes();
  inline void set_has_time_elapsed();
  inline void clear_has_time_elapsed();
  inline void set_has_num_cars();
  inline void clear_has_num_cars();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 time_minutes_;
  ::google::protobuf::int32 time_elapsed_;
  ::google::protobuf::int32 num_cars_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_src_2frobocar_2eproto();
  friend void protobuf_AssignDesc_src_2frobocar_2eproto();
  friend void protobuf_ShutdownFile_src_2frobocar_2eproto();

  void InitAsDefaultInstance();
  static TrafficStateHeader* default_instance_;
};
// ===================================================================


// ===================================================================

// CarData

// required fixed64 node_from = 1;
inline bool CarData::has_node_from() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CarData::set_has_node_from() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CarData::clear_has_node_from() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CarData::clear_node_from() {
  node_from_ = GOOGLE_ULONGLONG(0);
  clear_has_node_from();
}
inline ::google::protobuf::uint64 CarData::node_from() const {
  return node_from_;
}
inline void CarData::set_node_from(::google::protobuf::uint64 value) {
  set_has_node_from();
  node_from_ = value;
}

// required fixed64 node_to = 2;
inline bool CarData::has_node_to() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CarData::set_has_node_to() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CarData::clear_has_node_to() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CarData::clear_node_to() {
  node_to_ = GOOGLE_ULONGLONG(0);
  clear_has_node_to();
}
inline ::google::protobuf::uint64 CarData::node_to() const {
  return node_to_;
}
inline void CarData::set_node_to(::google::protobuf::uint64 value) {
  set_has_node_to();
  node_to_ = value;
}

// required fixed64 max_step = 3;
inline bool CarData::has_max_step() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CarData::set_has_max_step() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CarData::clear_has_max_step() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CarData::clear_max_step() {
  max_step_ = GOOGLE_ULONGLONG(0);
  clear_has_max_step();
}
inline ::google::protobuf::uint64 CarData::max_step() const {
  return max_step_;
}
inline void CarData::set_max_step(::google::protobuf::uint64 value) {
  set_has_max_step();
  max_step_ = value;
}

// required fixed64 step = 4;
inline bool CarData::has_step() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CarData::set_has_step() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CarData::clear_has_step() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CarData::clear_step() {
  step_ = GOOGLE_ULONGLONG(0);
  clear_has_step();
}
inline ::google::protobuf::uint64 CarData::step() const {
  return step_;
}
inline void CarData::set_step(::google::protobuf::uint64 value) {
  set_has_step();
  step_ = value;
}

// required .justine.robocar.CarData.ProtoCarType type = 5;
inline bool CarData::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CarData::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CarData::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CarData::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::justine::robocar::CarData_ProtoCarType CarData::type() const {
  return static_cast< ::justine::robocar::CarData_ProtoCarType >(type_);
}
inline void CarData::set_type(::justine::robocar::CarData_ProtoCarType value) {
  assert(::justine::robocar::CarData_ProtoCarType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 caught = 6;
inline bool CarData::has_caught() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CarData::set_has_caught() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CarData::clear_has_caught() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CarData::clear_caught() {
  caught_ = 0;
  clear_has_caught();
}
inline ::google::protobuf::int32 CarData::caught() const {
  return caught_;
}
inline void CarData::set_caught(::google::protobuf::int32 value) {
  set_has_caught();
  caught_ = value;
}

// optional string team = 7;
inline bool CarData::has_team() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CarData::set_has_team() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CarData::clear_has_team() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CarData::clear_team() {
  if (team_ != &::google::protobuf::internal::kEmptyString) {
    team_->clear();
  }
  clear_has_team();
}
inline const ::std::string& CarData::team() const {
  return *team_;
}
inline void CarData::set_team(const ::std::string& value) {
  set_has_team();
  if (team_ == &::google::protobuf::internal::kEmptyString) {
    team_ = new ::std::string;
  }
  team_->assign(value);
}
inline void CarData::set_team(const char* value) {
  set_has_team();
  if (team_ == &::google::protobuf::internal::kEmptyString) {
    team_ = new ::std::string;
  }
  team_->assign(value);
}
inline void CarData::set_team(const char* value, size_t size) {
  set_has_team();
  if (team_ == &::google::protobuf::internal::kEmptyString) {
    team_ = new ::std::string;
  }
  team_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CarData::mutable_team() {
  set_has_team();
  if (team_ == &::google::protobuf::internal::kEmptyString) {
    team_ = new ::std::string;
  }
  return team_;
}
inline ::std::string* CarData::release_team() {
  clear_has_team();
  if (team_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = team_;
    team_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CarData::set_allocated_team(::std::string* team) {
  if (team_ != &::google::protobuf::internal::kEmptyString) {
    delete team_;
  }
  if (team) {
    set_has_team();
    team_ = team;
  } else {
    clear_has_team();
    team_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 id = 8;
inline bool CarData::has_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CarData::set_has_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CarData::clear_has_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CarData::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 CarData::id() const {
  return id_;
}
inline void CarData::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 size = 9;
inline bool CarData::has_size() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CarData::set_has_size() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CarData::clear_has_size() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CarData::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 CarData::size() const {
  return size_;
}
inline void CarData::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
}

// repeated fixed64 path = 10;
inline int CarData::path_size() const {
  return path_.size();
}
inline void CarData::clear_path() {
  path_.Clear();
}
inline ::google::protobuf::uint64 CarData::path(int index) const {
  return path_.Get(index);
}
inline void CarData::set_path(int index, ::google::protobuf::uint64 value) {
  path_.Set(index, value);
}
inline void CarData::add_path(::google::protobuf::uint64 value) {
  path_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CarData::path() const {
  return path_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CarData::mutable_path() {
  return &path_;
}

// -------------------------------------------------------------------

// TrafficStateHeader

// required int32 time_minutes = 1;
inline bool TrafficStateHeader::has_time_minutes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrafficStateHeader::set_has_time_minutes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrafficStateHeader::clear_has_time_minutes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrafficStateHeader::clear_time_minutes() {
  time_minutes_ = 0;
  clear_has_time_minutes();
}
inline ::google::protobuf::int32 TrafficStateHeader::time_minutes() const {
  return time_minutes_;
}
inline void TrafficStateHeader::set_time_minutes(::google::protobuf::int32 value) {
  set_has_time_minutes();
  time_minutes_ = value;
}

// required int32 time_elapsed = 2;
inline bool TrafficStateHeader::has_time_elapsed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrafficStateHeader::set_has_time_elapsed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrafficStateHeader::clear_has_time_elapsed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrafficStateHeader::clear_time_elapsed() {
  time_elapsed_ = 0;
  clear_has_time_elapsed();
}
inline ::google::protobuf::int32 TrafficStateHeader::time_elapsed() const {
  return time_elapsed_;
}
inline void TrafficStateHeader::set_time_elapsed(::google::protobuf::int32 value) {
  set_has_time_elapsed();
  time_elapsed_ = value;
}

// required int32 num_cars = 3;
inline bool TrafficStateHeader::has_num_cars() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrafficStateHeader::set_has_num_cars() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrafficStateHeader::clear_has_num_cars() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrafficStateHeader::clear_num_cars() {
  num_cars_ = 0;
  clear_has_num_cars();
}
inline ::google::protobuf::int32 TrafficStateHeader::num_cars() const {
  return num_cars_;
}
inline void TrafficStateHeader::set_num_cars(::google::protobuf::int32 value) {
  set_has_num_cars();
  num_cars_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace robocar
}  // namespace justine

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::justine::robocar::CarData_ProtoCarType>() {
  return ::justine::robocar::CarData_ProtoCarType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_src_2frobocar_2eproto__INCLUDED
