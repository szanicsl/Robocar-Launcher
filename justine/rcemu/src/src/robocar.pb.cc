// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/robocar.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "src/robocar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace justine {
namespace robocar {

namespace {

const ::google::protobuf::Descriptor* CarData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CarData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CarData_ProtoCarType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TrafficStateHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrafficStateHeader_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_src_2frobocar_2eproto() {
  protobuf_AddDesc_src_2frobocar_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "src/robocar.proto");
  GOOGLE_CHECK(file != NULL);
  CarData_descriptor_ = file->message_type(0);
  static const int CarData_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarData, node_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarData, node_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarData, max_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarData, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarData, caught_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarData, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarData, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarData, path_),
  };
  CarData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CarData_descriptor_,
      CarData::default_instance_,
      CarData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CarData));
  CarData_ProtoCarType_descriptor_ = CarData_descriptor_->enum_type(0);
  TrafficStateHeader_descriptor_ = file->message_type(1);
  static const int TrafficStateHeader_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficStateHeader, time_minutes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficStateHeader, time_elapsed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficStateHeader, num_cars_),
  };
  TrafficStateHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrafficStateHeader_descriptor_,
      TrafficStateHeader::default_instance_,
      TrafficStateHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficStateHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficStateHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrafficStateHeader));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_src_2frobocar_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CarData_descriptor_, &CarData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrafficStateHeader_descriptor_, &TrafficStateHeader::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_src_2frobocar_2eproto() {
  delete CarData::default_instance_;
  delete CarData_reflection_;
  delete TrafficStateHeader::default_instance_;
  delete TrafficStateHeader_reflection_;
}

void protobuf_AddDesc_src_2frobocar_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021src/robocar.proto\022\017justine.robocar\"\232\002\n"
    "\007CarData\022\021\n\tnode_from\030\001 \002(\006\022\017\n\007node_to\030\002"
    " \002(\006\022\020\n\010max_step\030\003 \002(\006\022\014\n\004step\030\004 \002(\006\0223\n\004"
    "type\030\005 \002(\0162%.justine.robocar.CarData.Pro"
    "toCarType\022\016\n\006caught\030\006 \001(\005\022\014\n\004team\030\007 \001(\t\022"
    "\n\n\002id\030\010 \001(\005\022\014\n\004size\030\t \001(\005\022\014\n\004path\030\n \003(\006\""
    "P\n\014ProtoCarType\022\n\n\006NORMAL\020\000\022\n\n\006POLICE\020\001\022"
    "\014\n\010GANGSTER\020\002\022\n\n\006CAUGHT\020\003\022\016\n\nPEDESTRIAN\020"
    "\004\"R\n\022TrafficStateHeader\022\024\n\014time_minutes\030"
    "\001 \002(\005\022\024\n\014time_elapsed\030\002 \002(\005\022\020\n\010num_cars\030"
    "\003 \002(\005B%\n\017justine.robocarB\022TrafficStatePr"
    "otos", 444);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "src/robocar.proto", &protobuf_RegisterTypes);
  CarData::default_instance_ = new CarData();
  TrafficStateHeader::default_instance_ = new TrafficStateHeader();
  CarData::default_instance_->InitAsDefaultInstance();
  TrafficStateHeader::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_src_2frobocar_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_src_2frobocar_2eproto {
  StaticDescriptorInitializer_src_2frobocar_2eproto() {
    protobuf_AddDesc_src_2frobocar_2eproto();
  }
} static_descriptor_initializer_src_2frobocar_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* CarData_ProtoCarType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CarData_ProtoCarType_descriptor_;
}
bool CarData_ProtoCarType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CarData_ProtoCarType CarData::NORMAL;
const CarData_ProtoCarType CarData::POLICE;
const CarData_ProtoCarType CarData::GANGSTER;
const CarData_ProtoCarType CarData::CAUGHT;
const CarData_ProtoCarType CarData::PEDESTRIAN;
const CarData_ProtoCarType CarData::ProtoCarType_MIN;
const CarData_ProtoCarType CarData::ProtoCarType_MAX;
const int CarData::ProtoCarType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CarData::kNodeFromFieldNumber;
const int CarData::kNodeToFieldNumber;
const int CarData::kMaxStepFieldNumber;
const int CarData::kStepFieldNumber;
const int CarData::kTypeFieldNumber;
const int CarData::kCaughtFieldNumber;
const int CarData::kTeamFieldNumber;
const int CarData::kIdFieldNumber;
const int CarData::kSizeFieldNumber;
const int CarData::kPathFieldNumber;
#endif  // !_MSC_VER

CarData::CarData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CarData::InitAsDefaultInstance() {
}

CarData::CarData(const CarData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CarData::SharedCtor() {
  _cached_size_ = 0;
  node_from_ = GOOGLE_ULONGLONG(0);
  node_to_ = GOOGLE_ULONGLONG(0);
  max_step_ = GOOGLE_ULONGLONG(0);
  step_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  caught_ = 0;
  team_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0;
  size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CarData::~CarData() {
  SharedDtor();
}

void CarData::SharedDtor() {
  if (team_ != &::google::protobuf::internal::kEmptyString) {
    delete team_;
  }
  if (this != default_instance_) {
  }
}

void CarData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CarData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CarData_descriptor_;
}

const CarData& CarData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2frobocar_2eproto();
  return *default_instance_;
}

CarData* CarData::default_instance_ = NULL;

CarData* CarData::New() const {
  return new CarData;
}

void CarData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    node_from_ = GOOGLE_ULONGLONG(0);
    node_to_ = GOOGLE_ULONGLONG(0);
    max_step_ = GOOGLE_ULONGLONG(0);
    step_ = GOOGLE_ULONGLONG(0);
    type_ = 0;
    caught_ = 0;
    if (has_team()) {
      if (team_ != &::google::protobuf::internal::kEmptyString) {
        team_->clear();
      }
    }
    id_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    size_ = 0;
  }
  path_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CarData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 node_from = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &node_from_)));
          set_has_node_from();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_node_to;
        break;
      }

      // required fixed64 node_to = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_node_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &node_to_)));
          set_has_node_to();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_max_step;
        break;
      }

      // required fixed64 max_step = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_max_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &max_step_)));
          set_has_max_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_step;
        break;
      }

      // required fixed64 step = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // required .justine.robocar.CarData.ProtoCarType type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::justine::robocar::CarData_ProtoCarType_IsValid(value)) {
            set_type(static_cast< ::justine::robocar::CarData_ProtoCarType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_caught;
        break;
      }

      // optional int32 caught = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_caught:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &caught_)));
          set_has_caught();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_team;
        break;
      }

      // optional string team = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->team().data(), this->team().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_id;
        break;
      }

      // optional int32 id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_size;
        break;
      }

      // optional int32 size = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_path;
        break;
      }

      // repeated fixed64 path = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_path:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 81, input, this->mutable_path())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_path())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_path;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CarData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 node_from = 1;
  if (has_node_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->node_from(), output);
  }

  // required fixed64 node_to = 2;
  if (has_node_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->node_to(), output);
  }

  // required fixed64 max_step = 3;
  if (has_max_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->max_step(), output);
  }

  // required fixed64 step = 4;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->step(), output);
  }

  // required .justine.robocar.CarData.ProtoCarType type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // optional int32 caught = 6;
  if (has_caught()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->caught(), output);
  }

  // optional string team = 7;
  if (has_team()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team().data(), this->team().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->team(), output);
  }

  // optional int32 id = 8;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->id(), output);
  }

  // optional int32 size = 9;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->size(), output);
  }

  // repeated fixed64 path = 10;
  for (int i = 0; i < this->path_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      10, this->path(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CarData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 node_from = 1;
  if (has_node_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->node_from(), target);
  }

  // required fixed64 node_to = 2;
  if (has_node_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->node_to(), target);
  }

  // required fixed64 max_step = 3;
  if (has_max_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->max_step(), target);
  }

  // required fixed64 step = 4;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->step(), target);
  }

  // required .justine.robocar.CarData.ProtoCarType type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // optional int32 caught = 6;
  if (has_caught()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->caught(), target);
  }

  // optional string team = 7;
  if (has_team()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team().data(), this->team().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->team(), target);
  }

  // optional int32 id = 8;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->id(), target);
  }

  // optional int32 size = 9;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->size(), target);
  }

  // repeated fixed64 path = 10;
  for (int i = 0; i < this->path_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(10, this->path(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CarData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 node_from = 1;
    if (has_node_from()) {
      total_size += 1 + 8;
    }

    // required fixed64 node_to = 2;
    if (has_node_to()) {
      total_size += 1 + 8;
    }

    // required fixed64 max_step = 3;
    if (has_max_step()) {
      total_size += 1 + 8;
    }

    // required fixed64 step = 4;
    if (has_step()) {
      total_size += 1 + 8;
    }

    // required .justine.robocar.CarData.ProtoCarType type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 caught = 6;
    if (has_caught()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->caught());
    }

    // optional string team = 7;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team());
    }

    // optional int32 id = 8;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 size = 9;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

  }
  // repeated fixed64 path = 10;
  {
    int data_size = 0;
    data_size = 8 * this->path_size();
    total_size += 1 * this->path_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CarData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CarData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CarData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CarData::MergeFrom(const CarData& from) {
  GOOGLE_CHECK_NE(&from, this);
  path_.MergeFrom(from.path_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_from()) {
      set_node_from(from.node_from());
    }
    if (from.has_node_to()) {
      set_node_to(from.node_to());
    }
    if (from.has_max_step()) {
      set_max_step(from.max_step());
    }
    if (from.has_step()) {
      set_step(from.step());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_caught()) {
      set_caught(from.caught());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CarData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CarData::CopyFrom(const CarData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CarData::Swap(CarData* other) {
  if (other != this) {
    std::swap(node_from_, other->node_from_);
    std::swap(node_to_, other->node_to_);
    std::swap(max_step_, other->max_step_);
    std::swap(step_, other->step_);
    std::swap(type_, other->type_);
    std::swap(caught_, other->caught_);
    std::swap(team_, other->team_);
    std::swap(id_, other->id_);
    std::swap(size_, other->size_);
    path_.Swap(&other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CarData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CarData_descriptor_;
  metadata.reflection = CarData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrafficStateHeader::kTimeMinutesFieldNumber;
const int TrafficStateHeader::kTimeElapsedFieldNumber;
const int TrafficStateHeader::kNumCarsFieldNumber;
#endif  // !_MSC_VER

TrafficStateHeader::TrafficStateHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrafficStateHeader::InitAsDefaultInstance() {
}

TrafficStateHeader::TrafficStateHeader(const TrafficStateHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrafficStateHeader::SharedCtor() {
  _cached_size_ = 0;
  time_minutes_ = 0;
  time_elapsed_ = 0;
  num_cars_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrafficStateHeader::~TrafficStateHeader() {
  SharedDtor();
}

void TrafficStateHeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrafficStateHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficStateHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrafficStateHeader_descriptor_;
}

const TrafficStateHeader& TrafficStateHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2frobocar_2eproto();
  return *default_instance_;
}

TrafficStateHeader* TrafficStateHeader::default_instance_ = NULL;

TrafficStateHeader* TrafficStateHeader::New() const {
  return new TrafficStateHeader;
}

void TrafficStateHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_minutes_ = 0;
    time_elapsed_ = 0;
    num_cars_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrafficStateHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 time_minutes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_minutes_)));
          set_has_time_minutes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time_elapsed;
        break;
      }

      // required int32 time_elapsed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_elapsed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_elapsed_)));
          set_has_time_elapsed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num_cars;
        break;
      }

      // required int32 num_cars = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_cars:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_cars_)));
          set_has_num_cars();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrafficStateHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 time_minutes = 1;
  if (has_time_minutes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->time_minutes(), output);
  }

  // required int32 time_elapsed = 2;
  if (has_time_elapsed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time_elapsed(), output);
  }

  // required int32 num_cars = 3;
  if (has_num_cars()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_cars(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrafficStateHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 time_minutes = 1;
  if (has_time_minutes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->time_minutes(), target);
  }

  // required int32 time_elapsed = 2;
  if (has_time_elapsed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time_elapsed(), target);
  }

  // required int32 num_cars = 3;
  if (has_num_cars()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_cars(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrafficStateHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 time_minutes = 1;
    if (has_time_minutes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_minutes());
    }

    // required int32 time_elapsed = 2;
    if (has_time_elapsed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_elapsed());
    }

    // required int32 num_cars = 3;
    if (has_num_cars()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_cars());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficStateHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrafficStateHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrafficStateHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrafficStateHeader::MergeFrom(const TrafficStateHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_minutes()) {
      set_time_minutes(from.time_minutes());
    }
    if (from.has_time_elapsed()) {
      set_time_elapsed(from.time_elapsed());
    }
    if (from.has_num_cars()) {
      set_num_cars(from.num_cars());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrafficStateHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficStateHeader::CopyFrom(const TrafficStateHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficStateHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TrafficStateHeader::Swap(TrafficStateHeader* other) {
  if (other != this) {
    std::swap(time_minutes_, other->time_minutes_);
    std::swap(time_elapsed_, other->time_elapsed_);
    std::swap(num_cars_, other->num_cars_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrafficStateHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrafficStateHeader_descriptor_;
  metadata.reflection = TrafficStateHeader_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace robocar
}  // namespace justine

// @@protoc_insertion_point(global_scope)
